# source2.devices$name<-as.character(bundestag$name)
# It creates a matrix with the Standard Levenshtein
# distance between the name fields of both sources
# Run only one of these two, and run only once
# dist.name<-adist(
#       source1.devices$name,source2.devices$name,
#       partial = TRUE, ignore.case = TRUE)
# dist.name <- stringdistmatrix(
#  source1.devices$name, source2.devices$name,
#  method = "osa")
# We now take the pairs with the minimum distance
# min.name<-apply(dist.name, 1, min)
# Also run this chunck one time
# match.s1.s2<-NULL
# for(i in 1:nrow(dist.name))
# {
#    s2.i<-match(min.name[i],dist.name[i,])
#    s1.i<-i
#    match.s1.s2<-rbind(data.frame(s2.i=s2.i,s1.i=s1.i,
#                                  s2name=source2.devices[s2.i,]$name,
#                                  s1name=source1.devices[s1.i,]$name,
#                                  adist=min.name[i]),match.s1.s2)
# }
# and we then can have a look at the results
# View(match.s1.s2)
# write.csv(match.s1.s2,"matches.csv")
match.s1.s2 <- read.csv("matches.csv")
View(match.s1.s2)
match.s1.s2[order(match.s1.s2$adist),] %>%
head() %>%
kable(caption = "String Distances",booktabs = TRUE, row.names = FALSE) %>%
kable_styling(latex_options = "striped")
smallerthan3 <- match.s1.s2$adist < 4
matches <- match.s1.s2[smallerthan3,]
matches <- matches[complete.cases(matches),]
dim(matches)
Companies <- left_join(matches, Directors, by = c("s1name" = "dm_full_name"))
# Remove all duplicate entries
Companies <- Companies[!duplicated(Companies[c(4,7)]),]
#How many unique companies?
length(unique(Companies$company_name))
# We can see that 115 unique companies are connected.
#How many unique politicians?
length(unique(Companies$s1name))
number_connections <- Companies %>%
group_by(company_name) %>%
summarise(number = length(s1name))
View(number_connections)
View(Financial)
#Number of connections variable:
Financial <- left_join(Financial, number_connections, by =
c("Company name" = "company_name"))
View(Financial)
Financial$number[is.na(Financial$number)] <- 0
#Connections indicator (yes or no) variable:
Financial$indic <- 0
View(Financial)
Financial$indic[is.element(Financial$`Company name`, number_connections$company_name)] <- 1
View(Financial)
Financial <- Financial[,-c(1,70)]
Financial <- Financial %>%
pivot_longer(3:68, names_to = "variable", values_to = "value")
library(tidyverse)
Financial <- Financial %>%
pivot_longer(3:68, names_to = "variable", values_to = "value")
#Extract the year column
Financial$year <- as.numeric(str_extract(Financial$variable, "[0-9]+"))
# Remove "th.EUR" from the string
Financial$variable <- sub("\\sth\\sEUR","",
Financial$variable)
# Remove the years from the variable string
Financial$variable <- sapply(
str_extract_all(
Financial$variable,"[aA-zZ]+"),
paste, collapse = "_")
# Convert value to numeric
Financial$value <- as.numeric(Financial$value)
View(Financial)
#Wider format
Final <- pivot_wider(data = Financial, names_from = variable, values_from = value, values_fn = list(value = mean))
View(Final)
#Clean variable names
library(janitor)
Final <- Final %>%
clean_names()
View(Final)
View(Final)
names(Final)
Final %>%
ggplot(aes(x = long_term_debt/total_assets)) + geom_density() + facet_wrap(~.indic) + theme_classic()
View(Final)
Final %>%
ggplot(aes(x = ROA)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()
Final %>%
ggplot(aes(x = long_term_debt/total_assets)) + geom_density() + facet_wrap(~.indic) + theme_classic()
Final %>%
ggplot(aes(x = long_term_debt/total_assets)) + geom_density() + theme_classic()
Final %>%
ggplot(aes(x = long_term_debt/total_assets)) + geom_histogram() + theme_classic()
Final %>%
max(long_term_debt/total_assets)
Final %>%
summarise(max(long_term_debt/total_assets))
Final %>%
filter(!is.na(Final)) %>%
summarise(max(long_term_debt/total_assets))
Final %>%
filter(!is.na(long_term_debt)) %>%
summarise(max(long_term_debt/total_assets))
Final %>%
filter(long_term_debt < 1) %>%
ggplot(aes(x = long_term_debt/total_assets)) + geom_histogram() + theme_classic()
Final$long_term_debt
Final %>%
filter(long_term_debt < 1) %>%
ggplot(aes(x = long_term_debt/total_assets/10000)) + geom_histogram() + theme_classic()
Final %>%
filter(long_term_debt < 1) %>%
ggplot(aes(x = long_term_debt/total_assets/10000)) + geom_histogram(bins=1000) + theme_classic()
Final %>%
filter(long_term_debt < 1) %>%
ggplot(aes(x = long_term_debt/total_assets/10000)) + geom_histogram(bins=10) + theme_classic()
Final %>%
filter(long_term_debt < 1) %>%
ggplot(aes(x = long_term_debt)) + geom_histogram(bins=10) + theme_classic()
Final %>%
filter(long_term_debt < 10000000) %>%
ggplot(aes(x = long_term_debt)) + geom_histogram(bins=10) + theme_classic()
select(na.omit(Final) %>%
Final %>%
select(na.omit(Final)) %>%
ggplot(aes(x = ROA)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()
ggplot(aes(x = long_term_debt) + geom_density() + facet_wrap(. ~ indic) + theme_classic()
Final %>%
select(na.omit(Final)) %>%
ggplot(aes(x = long_term_debt)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()
Final %>%
select(na.omit()) %>%
ggplot(aes(x = long_term_debt)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/1000000)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/100000000)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/100000000)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0.0, 0.05))
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/1000000)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0,5))
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/1000000)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0,2))
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/1000000)) + geom_density() + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0,0.02))
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/1000000)) + geom_histogram() + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0,0.02))
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/1000000)) + geom_histogram(bins = 10) + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0,0.02))
ggplot(aes(x = long_term_debt/1000000)) + geom_histogram(stat(bins = 10)_ + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0,0.02))
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/1000000)) + geom_histogram(stat(bins = 10)) + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0,0.02))
Final %>%
na.omit() %>%
ggplot(aes(x = long_term_debt/1000000)) + geom_histogram() + facet_wrap(. ~ indic) + theme_classic()+ coord_cartesian(xlim = c(0,0.02))
Final %>%
filter(!is.na(long_term_debt)) %>%
summarise(ln(long_term_debt)))
Final %>%
filter(!is.na(long_term_debt)) %>%
summarise(ln(long_term_debt))
Final %>%
filter(!is.na(long_term_debt)) %>%
summarise(log(long_term_debt))
Final %>%
filter(!is.na(long_term_debt)) %>%
log(long_term_debt))
Final %>%
filter(!is.na(long_term_debt)) %>%
log(long_term_debt)
Final %>%
na.omit(long_term_debt) %>%
log(long_term_debt)
Final$long_term_debt
Final %>%
na.omit() %>%
log(long_term_debt)
ggplot(data = Final, aes(x = log(long_term_debt))) + geom_histogram()
ggplot(data = Final, aes(x = log(long_term_debt))) + geom_density() + facet_wrap(.~indic)
ggplot(data = Final, aes(x = log(long_term_debt))) + geom_density() + facet_wrap(.~indic) + geom_vline(xintercept = 5, linetype = "dashed")
ggplot(data = Final, aes(x = log(long_term_debt))) + geom_density() + facet_wrap(.~indic) + geom_vline(xintercept = 8, linetype = "dashed")
ggplot(data = Final, aes(x = log(long_term_debt))) + geom_density() + facet_wrap(.~indic) + geom_vline(xintercept = 7, linetype = "dashed")
ggplot(data = Final, aes(x = log(long_term_debt))) + geom_density() + facet_wrap(.~indic) + geom_vline(xintercept = median(log(long_term_debt)), linetype = "dashed")
ggplot(data = Final, aes(x = log(long_term_debt))) + geom_density() + facet_wrap(.~indic) + geom_vline(xintercept = median(log(Final$long_term_debt)), linetype = "dashed")
median(log(Final$long_term_debt))
ggplot(data = Final, aes(x = log(long_term_debt))) + geom_density() + facet_wrap(.~indic) + geom_vline(xintercept = median(log(Final$long_term_debt), na.rm = TRUE), linetype = "dashed")
ggplot(data = Final, aes(x = long_term_debt/total_assets))) +
ggplot(data = Final, aes(x = long_term_debt/total_assets)) +
geom_density() +
facet_wrap(.~indic) +
geom_vline(xintercept = median(log(Final$long_term_debt), na.rm = TRUE), linetype = "dashed")
ggplot(data = Final, aes(x = log(long_term_debt/total_assets)) +
ggplot(data = Final, aes(x = log(long_term_debt/total_assets))) +
geom_density() +
facet_wrap(.~indic) +
geom_vline(xintercept = median(log(Final$long_term_debt), na.rm = TRUE), linetype = "dashed")
ggplot(data = Final, aes(x = log(long_term_debt/total_assets))) +
geom_density() +
facet_wrap(.~indic) +
geom_vline(xintercept = median(log(Final$long_term_debt/Final$total_assets), na.rm = TRUE), linetype = "dashed")
library(devtools)
install_github("https://github.com/hrbrmstr/hrbrthemes")
install.packages('hrbrthemes')
Amadeusdata <- NULL
install.packages('hrbrthemes')
Financial <- NULL
install.packages('hrbrthemes')
install.packages('hrbrthemes')
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(readxl)
Amadeusdata <- read_excel("Amadeus_Export_1.xlsx", sheet = "Results")
names(Amadeusdata)
Financial <- Amadeusdata[!is.na(Amadeusdata[,2]),]
# Next, I "fill in" the dataset by adding the name for each company
library(zoo)
Amadeusdata[,2] <- na.locf(Amadeusdata[,2])
# Now, I extract only the dataset with directors
Directors <- Amadeusdata[,c(2,70)]
# Because there are a lot of duplicates, I want to filter
# the dataset to unique observations
Directors <- unique(Directors)
#This is what the Directors data set looks like now:
library(kableExtra)
Directors %>%
head() %>%
kable(caption = "Company - Director",booktabs = TRUE, row.names = FALSE) %>%
kable_styling(latex_options = "striped")
#I clean the names of the dataset to facilitate later programming
library(janitor)
Directors <- clean_names(Directors)
library(rvest)
library(dplyr)
source <- read_html(
"https://en.wikipedia.org/wiki/List_of_members_of_the_19th_Bundestag")
bundestag <- as.data.frame(source %>%
html_nodes("table.wikitable:nth-child(7)") %>%
html_table(fill=TRUE))
head(bundestag)
bundestag <-
bundestag %>%
clean_names()
library(stringr)
bundestag$name <- str_replace(bundestag$name,"\\s\\[(.+)","")
bundestag$year_of_birth <- str_replace(bundestag$year_of_birth,"\\[(.+)","")
bundestag$constituency_for_directly_elected_members <- str_replace(bundestag$constituency_for_directly_elected_members,"\\s\\[(.+)","")
bundestag$constituency_vote_percentage_if_applicable <- str_replace(bundestag$constituency_vote_percentage_if_applicable,"\\s%(.+)","")
bundestag %>%
group_by(state) %>%
summarize(count = n()) %>%
kable(caption = "How many politicians per state?",booktabs = TRUE, row.names = FALSE) %>%
kable_styling(latex_options = "striped")
#String-matching
# library(stringdist)
# source1.devices <- Directors
# source2.devices <- bundestag
# To make sure we are dealing with charts
# source1.devices$name<-as.character(Directors$dm_full_name)
# source2.devices$name<-as.character(bundestag$name)
# It creates a matrix with the Standard Levenshtein
# distance between the name fields of both sources
# Run only one of these two, and run only once
# dist.name<-adist(
#       source1.devices$name,source2.devices$name,
#       partial = TRUE, ignore.case = TRUE)
# dist.name <- stringdistmatrix(
#  source1.devices$name, source2.devices$name,
#  method = "osa")
# We now take the pairs with the minimum distance
# min.name<-apply(dist.name, 1, min)
# Also run this chunck one time
# match.s1.s2<-NULL
# for(i in 1:nrow(dist.name))
# {
#    s2.i<-match(min.name[i],dist.name[i,])
#    s1.i<-i
#    match.s1.s2<-rbind(data.frame(s2.i=s2.i,s1.i=s1.i,
#                                  s2name=source2.devices[s2.i,]$name,
#                                  s1name=source1.devices[s1.i,]$name,
#                                  adist=min.name[i]),match.s1.s2)
# }
# and we then can have a look at the results
# View(match.s1.s2)
# write.csv(match.s1.s2,"matches.csv")
match.s1.s2 <- read.csv("matches.csv")
match.s1.s2[order(match.s1.s2$adist),] %>%
head() %>%
kable(caption = "String Distances",booktabs = TRUE, row.names = FALSE) %>%
kable_styling(latex_options = "striped")
smallerthan3 <- match.s1.s2$adist < 4
matches <- match.s1.s2[smallerthan3,]
matches <- matches[complete.cases(matches),]
dim(matches)
Companies <- left_join(matches, Directors, by = c("s1name" = "dm_full_name"))
# Remove all duplicate entries
Companies <- Companies[!duplicated(Companies[c(4,7)]),]
#How many unique companies?
length(unique(Companies$company_name))
# We can see that 115 unique companies are connected.
#How many unique politicians?
length(unique(Companies$s1name))
# Given that 74 politicians are connected, this means some politicians have more
# than one board position!
# Let's now count the number of politicians per firm:
number_connections <- Companies %>%
group_by(company_name) %>%
summarise(number = length(s1name))
#Number of connections variable:
Financial <- left_join(Financial, number_connections, by =
c("Company name" = "company_name"))
Financial$number[is.na(Financial$number)] <- 0
#Connections indicator (yes or no) variable:
Financial$indic <- 0
Financial$indic[is.element(Financial$`Company name`, number_connections$company_name)] <- 1
library(tidyverse)
Financial <- Financial[,-c(1,70)]
Financial <- Financial %>%
pivot_longer(3:68, names_to = "variable", values_to = "value")
#Extract the year column
Financial$year <- as.numeric(str_extract(Financial$variable, "[0-9]+"))
# Remove "th.EUR" from the string
Financial$variable <- sub("\\sth\\sEUR","",
Financial$variable)
# Remove the years from the variable string
Financial$variable <- sapply(
str_extract_all(
Financial$variable,"[aA-zZ]+"),
paste, collapse = "_")
# Convert value to numeric
Financial$value <- as.numeric(Financial$value)
#Wider format
Final <- pivot_wider(data = Financial, names_from = variable, values_from = value, values_fn = list(value = mean))
#Clean variable names
library(janitor)
Final <- Final %>%
clean_names()
# Let's make a graph comparing politically connected firms to those that are not, and compare them
ggplot(data = Final, aes(x = log(long_term_debt/total_assets))) +
geom_density() +
facet_wrap(.~indic) +
geom_vline(xintercept = median(log(Final$long_term_debt/Final$total_assets), na.rm = TRUE),
linetype = "dashed")
# Let's now do a small regression analysis
ggplot(data = Final, aes(x = log(long_term_debt/total_assets))) +
geom_density() +
facet_wrap(.~indic) +
geom_vline(xintercept = median(log(Final$long_term_debt/Final$total_assets), na.rm = TRUE),
linetype = "dashed") + theme_light()
ggplot(data = Final, aes(x = log(long_term_debt/total_assets))) +
geom_density() +
facet_wrap(.~indic) +
geom_vline(xintercept = median(log(Final$long_term_debt/Final$total_assets), na.rm = TRUE),
linetype = "dashed") + theme_light() +
xlab("Hallo")
ggplot(data = Final, aes(x = log(long_term_debt/total_assets))) +
geom_density() +
facet_wrap(.~indic) +
geom_vline(xintercept = median(log(Final$long_term_debt/Final$total_assets), na.rm = TRUE),
linetype = "dashed") + theme_light() +
xlab("Distribution of Long-term Debt / Total Assets") + ylab("Density")
names(FInal)
names(Final)
model1 <- lm(data = Final, log(long_term_debt/total_assets)) ~ indic + current_assets/total_assets + fixed_assets/total_assets)
model1 <- lm(data = Final, log(long_term_debt/total_assets) ~ indic + current_assets/total_assets + fixed_assets/total_assets)
model1 <- lm(data = Final, log(long_term_debt/total_assets) ~ indic + current_assets/total_assets + fixed_assets/total_assets, na.rm= TRUE)
log(Final$long_term_debt/Final$total_assets)
max(log(Final$long_term_debt/Final$total_assets))
max(log(Final$long_term_debt/Final$total_assets), na.rm = TRUE)
model1 <- Final %>%
na.omit() %>%
lm(log(long_term_debt/total_assets) ~ indic + current_assets/total_assets + fixed_assets/total_assets)
Final %>%
na.omit() %>%
lm(log(long_term_debt/total_assets) ~ indic + current_assets/total_assets + fixed_assets/total_assets)
test <- Final %>%
na.omit() %>%
lm(log(long_term_debt/total_assets) ~ indic + current_assets/total_assets + fixed_assets/total_assets)
Final %>%
na.omit() %>%
lm(log(long_term_debt/total_assets) ~ indic + current_assets/total_assets + fixed_assets/total_assets)
a <- Final %>%
na.omit()
lm(data = a, log(long_term_debt/total_assets) ~ indic + current_assets/total_assets + fixed_assets/total_assets)
Final$lev <- Final$long_term_debt/Final$total_assets
Final$currat <- Final$current_assets/Final$total_assets
lm(Final, lev ~ indic + currat)
lm(data = Final, lev ~ indic + currat)
summary(lm)
model1 <- lm(data = Final, lev ~ indic)
model2 <- lm(data = Fianl, lev ~ indic + currat)
model2 <- lm(data = Final, lev ~ indic + currat)
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final$clca <- Final$current_liabilities/Final$current_assets
model3 <- lm(data = Final, lev ~ indic + currat + clca)
model3 <- lm(data = Final, lev ~ indic + currat + clca, na.rm = TRUE)
Final %>%
na.omit() %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca, na.rm = TRUE)
Final %>%
na.omit() %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
traceback()
Final %>%
na.omit(currat) %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final %>%
na.omit(clca) %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final %>%
select(between(clca,-100,100)) %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
max(Final$clca, na.rm = T)
Final[!is.infinite(rowSums(Final))] %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final[!is.infinite(rowSums(Final)),] %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final[is.finite(rowSums(Final)),] %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
View(Final)
Final[clca < 100000,] %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final[is.finite(rowSums(Final)) && !is.na(Final),] %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final[is.finite(rowSums(Final)) && is.number(Final) && !is.na(Final),] %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final[is.finite(rowSums(Final)) && is.number(Final) && !is.na(Final),] %>%
model3 <- lm(data = Final, lev ~ indic + currat)
Final[is.finite(Final) && is.number(Final) && !is.na(Final),] %>%
model3 <- lm(data = Final, lev ~ indic + currat)
is.numeric(Final$clca[1])
is.infinite(Final$clca[1])
is.infinite(Final$clca)
which(is.infinite(Final$clca))
Final[-c(6518,8037,2554,27048),] %>%
na.omit() %>%
model3 <- lm(lev ~ indic + currat + clca)
Final[-c(6518,8037,2554,27048),] %>%
na.omit() %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final[-c(6518,8037,2554,27048),] %>%
na.omit() %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final[-c(6518,8037,2554,27048),] %>%
na.exclude() %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
Final[-c(6518,8037,25554,27048),] %>%
na.exclude() %>%
model3 <- lm(data = Final, lev ~ indic + currat + clca)
which(is.na(Final$clca))
Final[1:500,]%>%
na.omit() %>%
model3 <- lm(lev ~ indic)
Final[1:500,]%>%
na.omit() %>%
model3 <- lm(data = Final, lev ~ indic)
Final[1:500,] %>%
na.omit() %>%
model3 <- lm(data = Final, lev ~ indic)
model3 <- do(lm(lev ~ indic, data = Final))
model3 <- do(model = lm(lev ~ indic, data = Final))
model3 <- lm(data = Final, lev ~ indic + currat)
model3 <- lm(data = Final, lev ~ indic + currat + clca)
which(is.nan(Final$clca))
which(is.na(Final$clca))
which(is.inf(Final$clca))
which(is.infinite(Final$clca))
Final[-which(is.nan(Final$clca)) & which(is.na(Final$clca)) & which(is.infinite(Final$clca)),]
Final[!(which(is.nan(Final$clca)) & which(is.na(Final$clca)) & which(is.infinite(Final$clca))),]
Final[!(which(is.nan(Final$clca)) & !which(is.na(Final$clca)) & !which(is.infinite(Final$clca)),]
Final[!(which(is.nan(Final$clca)) & !which(is.na(Final$clca)) & !which(is.infinite(Final$clca))]
test <- Final[which(is.nan(Final$clca)),]
View(test)
test <- Final[!which(is.nan(Final$clca)),]
test <- Final[which(!is.nan(Final$clca)),]
test <- Final[which(!is.nan(Final$clca)) & which(!is.na(Final$clca)),]
test <- Final[which(!is.nan(Final$clca)) | which(!is.na(Final$clca)),]
test <- Final[which(!is.nan(Final$clca)) & (which(!is.na(Final$clca))),]
test <- Final[which(!is.nan(Final$clca)),]
test <- Final[which(!is.nan(Final$clca) & !is.na(Final$clca),]
test <- Final[which(!is.nan(Final$clca) & !is.na(Final$clca)),]
test <- Final[which(!is.nan(Final$clca) & !is.na(Final$clca) & !is.infinite(Final$clca)),]
model3 <- lm(data = test, lev ~ indic + currat + clca)
library(stargazer)
stargazer(model1, model2, model3, header = F,
title = "Regression Models", out = "html")
stargazer(model1, model2, model3, header = F,
title = "Regression Models", out = "htm")
stargazer(model1, model2, model3, header = F,
title = "Regression Models", type = "html")
```{r, results = 'asis'}
library(stargazer)
#Final model
model3 <- lm(data = test, lev ~ indic + currat + clca)
stargazer(model1, model2, model3, header = F,
title = "Regression Models", type = "html")
